<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="RCE.OS">
<Description>
Represents OS.</Description>
<IncludeCode>%occErrors</IncludeCode>
<Super>%Persistent</Super>
<TimeCreated>63474,50472.986157</TimeCreated>

<Parameter name="OS">
<Type>%String</Type>
<Expression>$ZCVT($p(%class,".",*),"l")</Expression>
</Parameter>

<Property name="Username">
<Type>%String</Type>
</Property>

<Property name="Password">
<Type>%String</Type>
</Property>

<Property name="Bit">
<Type>%String</Type>
<Parameter name="VALUELIST" value=",x86,x64"/>
</Property>

<Property name="Machine">
<Type>Machine</Type>
<Cardinality>parent</Cardinality>
<Inverse>OS</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Instances">
<Description>
All instances installed on this OS.</Description>
<Type>Instance</Type>
<Cardinality>children</Cardinality>
<Inverse>OS</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ExecuteScript">
<Description>
Execute provided script against OS. Script must be OS-level with all instance-level commands converted to OS level.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateTestScript">
<Description>
Returns test script. Includes appropriate OS and instance level commands.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>RCE.Script</ReturnType>
<Implementation><![CDATA[
	set script = ##class(RCE.Script).%New()
	
	do script.Insert(##class(RCE.Command).%New("set ^test=1",1))
	do script.Insert(##class(RCE.Command).%New("set ^test(1)=$zdt($NOW())",1))
	return script
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description><![CDATA[
Creates new RCE.OS.Linux or RCE.OS.Windows object, depending on OS value.<br>
<b>OS</b> - string, values (case-insensitive) : windows, linux, unix. Anything else returns RCE.OS object.]]></Description>
<FormalSpec>OS:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	return:($d(OS)'=1) $$$OK
	set OS = $ZCVT(OS,"l")
	return:((OS = "linux") || (OS = "unix")) ##class(RCE.OS.Linux).%New()
	return:(OS = "windows") ##class(RCE.OS.Windows).%New()
	return $$$OK //$$$ERROR($$$InvalidArgument)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RCE.OSD</DataLocation>
<DefaultData>OSDefaultData</DefaultData>
<IdLocation>^RCE.OSD</IdLocation>
<IndexLocation>^RCE.OSI</IndexLocation>
<StreamLocation>^RCE.OSS</StreamLocation>
<Data name="OSDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Username</Value>
</Value>
<Value name="3">
<Value>Password</Value>
</Value>
<Value name="4">
<Value>Instance</Value>
</Value>
<Value name="5">
<Value>Instances</Value>
</Value>
<Value name="6">
<Value>Bit</Value>
</Value>
<Value name="7">
<Value>Dir</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
