<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="RCE.Instance">
<Description>
Represents  one Caché instance.</Description>
<Super>%Persistent</Super>
<TimeCreated>63474,52493.217484</TimeCreated>

<Property name="Name">
<Description>
Instance name.</Description>
<Type>%String</Type>
<InitialExpression>"Cache"</InitialExpression>
<Required>1</Required>
</Property>

<Property name="Version">
<Description>
Instance version.</Description>
<Type>%String</Type>
</Property>

<Property name="Security">
<Description>
Instance security settings.</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Minimal,Normal,Locked Down"/>
</Property>

<Property name="User">
<Description>
Caché Username to access instance. Leave empty if not required. </Description>
<Type>%String</Type>
</Property>

<Property name="Pass">
<Description>
Caché Password to access instance. Leave empty if not required.</Description>
<Type>%String</Type>
</Property>

<Property name="Dir">
<Description>
Caché installation directory.</Description>
<Type>%String</Type>
</Property>

<Property name="OS">
<Type>OS</Type>
<Cardinality>parent</Cardinality>
<Inverse>Instances</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="ExecuteScript">
<Description><![CDATA[
Takes RCE.Script, converts it OS-level RCE.Script and executes it.<br>
<b>Namespace</b> - initial namespace to execute instance-level commands against.]]></Description>
<FormalSpec>Script:RCE.Script,Namespace:%String="%SYS"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = ..%ValidateObject()
	return:$$$ISERR(st) st
	
	if (..OS.#OS [ "linux") do ..BuildScriptLinux(.Script, Namespace)
	if (..OS.#OS [ "windows") do ..BuildScriptWindows(.Script, Namespace)
	
	set st = ..OS.ExecuteScript(Script)
	return st
]]></Implementation>
</Method>

<Method name="BuildScriptLinux">
<Description><![CDATA[
Takes RCE.Script and converts it OS-level RCE.Script.<br>
<b>Namespace</b> - initial namespace to execute instance-level commands against.]]></Description>
<FormalSpec><![CDATA[&Script:RCE.Script,Namespace:%String="%SYS"]]></FormalSpec>
<Implementation><![CDATA[
	do Script.GetNext(.i)
	while (i) {
		if (Script.GetAt(i).Level = 1) {
			set instancescript = ##class(RCE.Script).%New()
			for j=i:1:Script.Count() {
				if (Script.GetAt(j).Level '= 1) {
					set j=j-1
					quit
				}
				do instancescript.Insert(Script.GetAt(j))
				//we determined, that commands from i to j are instance level and formed new list from them
			}

			for k=j:-1:i {
				do Script.RemoveAt(k)
			}

			do Script.InsertAt(instancescript.ConvertInstanceScriptToLinuxCommand(..Name,..User,..Pass, Namespace),i)
		}
		do Script.GetNext(.i)		
	}
]]></Implementation>
</Method>

<Method name="BuildScriptWindows">
<Description><![CDATA[
Takes RCE.Script and converts it bat file (filename returned in Script variable)<br>
<b>Namespace</b> - initial namespace to execute instance-level commands against.]]></Description>
<FormalSpec><![CDATA[&Script:RCE.Script,Namespace:%String="%SYS"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename  = ##class(%File).TempFilename("bat")
	set file=##class(%File).%New(filename)
	do file.Open("WSN")
	
	do Script.GetNext(.i)
	while (i) {
		if (Script.GetAt(i).Level = 1) {
			//do file.WriteLine(Script.GetAt(i).Command)
			set instancescript = ##class(RCE.Script).%New()
			for j=i:1:Script.Count() {
				if (Script.GetAt(j).Level '= 1) {
					set j=j-1
					quit
				}
				do instancescript.Insert(Script.GetAt(j))
				//we determined, that commands from i to j are instance level and formed new list from them
			}
			
			for k=j:-1:i {
				do Script.RemoveAt(k)
			}

			do Script.InsertAt(instancescript.ConvertInstanceScriptToWindowsCommand(..Name,..User,..Pass, Namespace, ##class(%File).SubDirectoryName(..Dir,"bin",1) ,i))
			do Script.InsertAt(##class(RCE.Command).%New("del commands.txt",0),i+1)
			
		} 
			
		do file.WriteLine(Script.GetAt(i).Command)
		do Script.GetNext(.i)		
	}
	set st = file.%Save()
	do file.Close()
	set Script = filename
	return st
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RCE.InstanceD</DataLocation>
<DefaultData>InstanceDefaultData</DefaultData>
<IdLocation>^RCE.InstanceD</IdLocation>
<IndexLocation>^RCE.InstanceI</IndexLocation>
<StreamLocation>^RCE.InstanceS</StreamLocation>
<Data name="InstanceDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Version</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Security</Value>
</Value>
<Value name="5">
<Value>User</Value>
</Value>
<Value name="6">
<Value>Pass</Value>
</Value>
<Value name="7">
<Value>Dir</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
